#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
Board layouts for Ataxx AI testing and gameplay.

This module provides a collection of predefined board layouts that can be used
for both testing AI algorithms and gameplay. Each layout is designed for specific
testing scenarios or gameplay experiences.

Board representation:
- 0: Empty cell
- 1: White piece (player 1)
- -1: Black piece (player -1)
"""

# Default Ataxx starting positions: pieces in opposite corners
MAP1 = [
    [1, 1, 1, 1, -1, -1, 0],
    [-1, 1, 1, 1, -1, -1, -1],
    [-1, -1, 1, 1, -1, 1, 0],
    [-1, -1, 1, 1, 1, 1, 1],
    [1, 1, 1, -1, -1, -1, 1],
    [0, -1, 1, -1, -1, -1, -1],
    [0, 0, 1, -1, -1, -1, 1],
]

# A half-filled board based on the Ataxx game image
MAP2 = [
    [-1, -1, 0, 0, 0, 0, -1],
    [0, -1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, -1, 0, 0],
    [0, 0, 0, 1, 1, 0, 0],
    [0, 0, 1, 1, 1, 1, 0],
    [0, 0, 1, 1, 1, 1, 0],
    [-1, 0, 0, 1, -1, 1, 0],
]

# A layout with black dominance and white pieces based on the image
MAP3 = [
    [1, 1, 1, 1, 1, 1, 1],
    [-1, 1, 1, 1, 1, 1, 1],
    [1, 1, 1, -1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [1, -1, -1, -1, -1, -1, 1],
    [0, -1, -1, -1, -1, -1, -1],
    [0, 0, 1, -1, -1, -1, 1],

]

# A crowded board with exactly 11 empty cells (matches frontend layout2)
MAP4 = [
    [0, 1, 1, 1, 1, 1, 0],
    [1, 1, -1, -1, -1, 1, 0],
    [0, -1, -1, -1, -1, 1, 0],
    [0, -1, 1, 1, -1, -1, 0],
    [-1, -1, -1, 1, 1, -1, 1],
    [0, -1, -1, 1, 1, -1, 1],
    [0, -1, -1, -1, 1, 0, 0],
]

MAP5 = [
    [-1, 0, 0, 0, 0, 0, -1],
    [-1, -1, 0, 0, 0, -1, -1],
    [0, 0, 0, 0, -1, -1, -1],
    [0, 0, 0, 0, -1, -1, -1],
    [0, 0, 0, 1, -1, 1, -1],
    [0, 0, -1, -1, -1, -1, -1],
    [-1, 0, -1, -1, 1, -1, -1],
]

MAP6 = [
    [-1,0,0,0,0,0,0],
    [0,-1,1,1,0,0,-1],
    [0,-1,-1,-1,1,1,1],
    [0,0,1,-1,-1,1,1],
    [0,1,1,-1,1,1,1],
    [1,1,1,1,-1,-1,1],
    [0,1,-1,1,-1,-1,-1],
]

MAP7 = [
    [0, 1, 0, 0, -1, -1, -1],
    [-1, 1, 1, 0,0, -1, -1],
    [1, 1, 1, 1, -1, -1, 1],
    [1, 1, 1, -1, -1, -1, 0],
    [1, 1, -1, -1, 0, 0, 0],
    [0, 0, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, 0, 1, 1],
]

MAP8 = [
    [1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, -1, -1, 0],
    [0, 0, 1, 1, -1, -1,0],
    [0, 1, 1, 1, -1, -1, -1],
    [0, -1, 1, 1, 1, -1, -1],
    [0, -1, -1, -1, -1, -1, -1],
]

MAP9 = [
    [1, 0, 1, 0, 0, 0, 1],
    [0, 1, 0, 0, 0, 1, 1],
    [0, 0, 0, 0, -1, 1, 0],
    [0, 0, 0, -1, -1, 0, 0],
    [-1, 0, 0, 0, -1, 1, 0],
    [0, -1, 0, 0, 0, 0, 0],
    [-1, 0, 0, 0, 0, 1, 1],

]

MAP10 = [
    [1, 0, -1, 0, 0, 0, -1],
    [1, -1, 1, 0, 0, 0, 0],
    [1, -1, 1, 1, 0, 0, 0],
    [-1, -1, 1, 1, 0, 0, 0],
    [-1, -1, -1, -1, 0, 0, 0],
    [1, 1, 1, 1, 0, 1, 1],
    [1, 1, 1, 1, 0, 1, 1],

]

MAP11 = [
    [-1, -1, -1, 1, -1, -1, 1],
    [-1, -1, -1, 1, -1, -1, 1],
    [1, 1, -1, -1, -1, 1, 1],
    [1, -1, 1, 1, 1, 1, 1],
    [0, -1, -1, -1, 0, 0, 0],
    [-1, 1, 1, 0, 0, 0, 0],
    [0, 1, 1, 0, 0, 0, 0],
]

MAP12 = [
    [1, 0, 0, 0, 0, 0, -1],
    [0, 1, 0, 0, 0, 1, 0],
    [0, 0, 0, 0, 1, 1, 0],
    [0, 0, 0, 0, 0, 1, 0],
    [-1, 0, 0, 0, 0, 0, 0],
    [0, -1, 0, 0, 0, 1, 0],
    [-1, 0, 0, 0, 0, 0, 1],
]

MAP13 = [
    [-1, 0, 0, 0, 0, 0, -1],
    [0, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, 0, 0, 0, 0],
    [0, -1, -1, 1, 1, 1, -1],
    [-1, -1, -1, 1, -1, -1, -1],
    [0, -1, -1, 1, -1, -1, 0],
    [-1, -1, -1, 1, -1, -1, 0],

]

MAP14 = [
    [0, 0, 0, 0, 0, -1, -1],
    [-1, 1, 1, 0, 0, -1, 0],
    [1, 1, 1, 0, 0, 0, 0],
    [0, -1, 0, 0, 0, 0, 0],
    [0, -1, -1, 0, 1, 1, -1],
    [0, -1, -1, -1, 1, -1, -1],
    [0, 1, 1, 1, 1, -1, 1],
 
]

MAP15 = [
    [1,1,-1,-1,-1,-1,1],
    [1,1,-1,-1,-1,0,-1],
    [0,0,0,1,1,0,-1],
    [0,0,0,1,1,1,-1],
    [-1,-1,-1,-1,-1,-1,-1],
    [-1,-1,-1,1,1,1,1],
    [1,1,-1,1,1,1,1],

]

MAP16 = [
    [1, 0, 0, 0, 0, 0, -1],
    [0, 1, 0, 0, 0, 1, 0],
    [0, 0, -1, -1, -1, 0, 0],
    [0, 0, 0, -1, 0, 0, 0],
    [0, 0, 0, 0, 0, -1, 0],
    [1, 1, 0, 0, -1, -1, -1],
    [1, 1, 0, 0, -1, -1, 1],
]

MAP17 = [
    [1, 1, 0, 0, 0, 0, -1],
    [1, 0, 0, 0, 0, 0, 0],
    [1, 0, 0, 0, 0, 0, 0],
    [0, 0, 0, -1, 0, 0, 0],
    [0, 0, -1, 0, 0, 0, 0],
    [0, -1, 0, 0, 0, 0, 0],
    [-1, 0, 0, 0, 0, 0, 1],
]

MAP18 = [
    [-1, -1, 1, -1, -1, 1, 1],
    [-1, -1, -1, 1, -1, 1, 1],
    [0, -1, -1, 1, 1, -1, -1],
    [-1, -1, 0, 1, 1, -1, -1],
    [1, -1, 0, 0, 1, -1, 1],
    [-1, -1, -1, 0, 1, -1, -1],
    [0, -1, 0, -1, 1, -1, -1],
]

MAP19 = [
    [0, 1, -1, 1, -1, 0, 0],
    [0, 1, -1, 1, -1, -1, 0],
    [0, -1, -1, -1, -1, -1, 0],
    [1, 1, -1, -1, -1, 1, 1],
    [-1, 1, -1, 0, 0, -1, -1],
    [-1, 1, 1, 0, 0, 1, 1],
    [-1, -1, -1, 0, 0, 0, 0],
]

MAP20 = [
    [0, 0, 0, -1, 0, 1, 1],
    [0, 1, 0, -1, -1, 1, 1],
    [-1, -1, -1, -1, -1, 0, 0],
    [-1, -1, 1, -1, -1, -1, 0],
    [0, 0, 0, 0, -1, -1, 0],
    [0, 0, 0, 0, 0, 1, 0],
    [1, 0, 0, 0, 0, 0, 0],
]

MAP21 = [
    [0, 0, 0, 0, 0, 0, 1],
    [0, 0, 0, 0, 0, -1, 0],
    [1, 1, 1, 1, -1, -1, 0],
    [-1, 1, 1, 1, -1, -1, 0],
    [-1, -1, 1, 1, 1, -1, -1],
    [-1, -1, -1, -1, -1, -1, 0],
    [1, 1, -1, 0, 0, 0, 0],
]

MAP22 = [
    [1, 0, 0, 0, 0, 0, -1],
    [0, 0, 0, 0, 1, -1, -1],
    [0, 0, -1, -1, 1, -1, -1],
    [0, -1, 1, -1, 0, 0, 0],
    [0, -1, 1, 0, 0, 0, 0],
    [0, -1, 0, 0, 0, 1, 1],
    [-1, 0, 0, 0, 0, 1, 1],
]

# All layouts available for use, with descriptive names
AVAILABLE_LAYOUTS = {
    "map1": MAP1,
    "map2": MAP2,
    "map3": MAP3,
    "map4": MAP4,
    "map5": MAP5,
    "map6": MAP6,
    "map7": MAP7,
    "map8": MAP8,
    "map9": MAP9,
    "map10": MAP10,
    "map11": MAP11,
    "map12": MAP12,
    "map13": MAP13,     
    "map14": MAP14,
    "map15": MAP15,
    "map16": MAP16,
    "map17": MAP17, 
    "map18": MAP18,
    "map19": MAP19,
    "map20": MAP20,
    "map21": MAP21,
    "map22": MAP22,
}

def get_layout(name):
    """Get a board layout by name.
    
    Args:
        name: String name of the layout
        
    Returns:
        A 2D list representing the board layout, or MAP1 if not found
    """
    return AVAILABLE_LAYOUTS.get(name, MAP1)
